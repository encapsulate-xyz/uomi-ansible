const { ApiPromise, WsProvider } = require('@polkadot/api');
const client = require('prom-client');
const axios = require('axios');

const TARGET_AUTHORITY = '{{ uomi.validator.grandpa_authority_id }}';
const PUSHGATEWAY_URL = 'https://{{ pushgateway_dns }}';
const JOB_NAME = 'chain_exporter';
const RPC_TIMEOUT_MS = 30000;
const PUSH_TIMEOUT_MS = 30000;

function log(msg) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${msg}`);
}

async function connectToApiWithTimeout(endpoint, timeoutMs) {
  const provider = new WsProvider(endpoint);

  return new Promise((resolve, reject) => {
    const timeout = setTimeout(() => {
      reject(new Error(`Connection to RPC endpoint timed out after ${timeoutMs / 1000} seconds.`));
    }, timeoutMs);

    provider.on('connected', async () => {
      try {
        const api = await ApiPromise.create({ provider });
        clearTimeout(timeout);
        resolve(api);
      } catch (err) {
        clearTimeout(timeout);
        reject(new Error('Failed to create API instance after connecting.'));
      }
    });

    provider.on('error', (err) => {
      clearTimeout(timeout);
      reject(new Error(`WebSocket connection error: ${err.message}`));
    });
  });
}

async function main() {
  try {
    log('Attempting to connect to Substrate RPC...');
    const api = await connectToApiWithTimeout('ws://127.0.0.1:{{ uomi.validator.ports.rpc_port }}', RPC_TIMEOUT_MS);
    log('Connected to Substrate RPC.');

    const grandpa = await api.query.grandpa.authorities();

    let isTargetFound = false;

    if (grandpa && grandpa.length > 0) {
      grandpa.forEach(([id]) => {
        const idHex = id.toString();
        if (idHex.toLowerCase() === TARGET_AUTHORITY.toLowerCase()) {
          isTargetFound = true;
        }
      });
    }

    const result = isTargetFound ? 1 : 0;

    const registry = new client.Registry();
    const matchMetric = new client.Gauge({
      name: 'substrate_node_authority_role',
      help: 'Whether the target GRANDPA authority was found (1 = yes, 0 = no)',
      labelNames: ['authority', 'env', 'project', 'type'],
    });

    const labels = {
      authority: TARGET_AUTHORITY,
      type: 'validator',
    };

    matchMetric.set(labels, result);
    registry.registerMetric(matchMetric);

    log('Pushing metrics to Pushgateway...');
    await axios.post(
      `${PUSHGATEWAY_URL}/metrics/job/${JOB_NAME}/project/{{ project }}/env/{{ env }}`,
      await registry.metrics(),
      {
        headers: {
          'Content-Type': 'text/plain',
          'Authorization': 'Basic {{ vault.default.pushgateway.auth_header }}'
        },
        timeout: PUSH_TIMEOUT_MS,
      }
    );

    log('Metrics successfully pushed to Pushgateway.');
    await api.disconnect();
  } catch (err) {
    log(`Error: ${err.message || err}`);
    process.exit(1);
  }
}

main();
